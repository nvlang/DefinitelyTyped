/*************************************************************
 *
 *  Copyright (c) 2020-2022 The MathJax Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * @fileoverview  The TextParser class for the textmacros package
 *
 * @author dpvc@mathjax.org (Davide P. Cervone)
 */
import TexParser from '../TexParser.js';
import ParseOptions from '../ParseOptions.js';
import { StackItem } from '../StackItem.js';
import { MmlNode } from '../../../core/MmlTree/MmlNode.js';
import { EnvList } from '../StackItem.js';
/**
 * Subclass of the TexParser but for handling text-mode material
 */
export declare class TextParser extends TexParser {
    /**
     * The accumulated text material to go into an mtext element
     */
    text: string;
    /**
     * Saved stack environments for processing braces
     */
    envStack: EnvList[];
    /**
     * The scriptlevel of this text-mode material
     */
    level: number | string | undefined;
    /**
     * The accumulated MmlNodes generated by parsing the text-mode material
     */
    protected nodes: MmlNode[];
    /**
     * Short-hand for obtaining the saved TexParser
     */
    get texParser(): any;
    /**
     * @override
     */
    get tags(): any;
    /**
     * @override
     * @constructor
     */
    constructor(text: string, env: EnvList, configuration: ParseOptions, level?: number | string);
    /**
     * Make sure we only return one element (wrap multiple ones in an mrow or mstyle, as needed).
     *
     * @override
     */
    mml(): MmlNode;
    /**
     * @override
     */
    Parse(): void;
    /**
     * Creates an mtext element for the saved text and pushes that onto the node list
     */
    saveText(): void;
    /**
     * @override
     */
    Push(mml: MmlNode | StackItem): void;
    /**
     * Push some math into the node list, adding mathsize and mathcolor
     *   if specified in the environment.
     *
     * @param {MmlNode} mml   The math nodes to push
     */
    PushMath(mml: MmlNode): void;
    /**
     * Add mathsize, mathcolor, and mathvariant to token nodes,
     *   if they are specified in the environment
     *
     * @param {MmlNode} mml   The node to adjust
     */
    addAttributes(mml: MmlNode): void;
    /**
     * Process the argument as text with the given environment settings
     *
     * @param {string} name   The macro that is calling for a parameter
     * @param {EnvList} env   The environment to use
     */
    ParseTextArg(name: string, env: EnvList): MmlNode;
    /**
     * Process an argument as text rather than math
     *
     * @override
     */
    ParseArg(name: string): MmlNode;
    /**
     * Throw an error
     *
     * @param {string} id        The id for the message string
     * @param {string} message   The English version of the message
     * @param {string[]} args    Any substitution args for the message
     */
    Error(id: string, message: string, ...args: string[]): void;
}
